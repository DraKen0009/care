name: Deploy Care

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
    branches:
      - develop
      - staging
    paths-ignore:
      - "docs/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: care
  AWS_DEFAULT_REGION: ap-south-1
  AWS_DEFAULT_OUTPUT: json
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  EKS_CLUSTER_NAME: ${{ secrets.AWS_EKS_CLUSTER_NAME }}
  ECS_SERVICE_BACKEND: "care-backend"
  ECS_SERVICE_CELERY: "care-celery"
  ECS_CLUSTER: "egov"
  ECS_TASK_DEFINITION_BACKEND: "./aws/backend.json"
  ECS_TASK_DEFINITION_CELERY: "./aws/celery.json"
  CONTAINER_NAME_BACKEND: "care-backend"
  CONTAINER_NAME_WORKER: "care-celery-worker"
  CONTAINER_NAME_CRON: "care-celery-beat"

jobs:
  test:
    uses: ./.github/workflows/reusable-test.yml
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    with:
      event_name: ${{ github.event_name }}

  build:
    needs: test
    name: Build & Push to container registries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Fill Celery Cron definition
        id: task-def-celery-cron
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_CELERY }}
          container-name: ${{ env.CONTAINER_NAME_CRON }}
          image: ghcr.io/${{ github.repository }}:latest

      - name: Fill Celery Worker definition
        id: task-def-celery-worker
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-celery-cron.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_NAME_WORKER }}
          image: ghcr.io/${{ github.repository }}:latest

      - name: Deploy Backend Celery
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def-celery-worker.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_CELERY }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Fill Backend Api definition
        id: task-def-api
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_BACKEND }}
          container-name: ${{ env.CONTAINER_NAME_BACKEND }}
          image: ghcr.io/${{ github.repository }}:latest

      - name: Deploy Backend Api
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def-api.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_BACKEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  deploy-staging-gcp:
    needs: build
    if: github.ref == 'refs/heads/staging'
    name: Deploy to staging GCP cluster
    runs-on: ubuntu-latest
    environment:
      name: Staging-GCP
      url: https://care-staging-api.ohc.network/
    steps:
      - name: Trigger deploy
        run: |
          COMMIT_SHA=${{ github.sha }}
          JSON='{"substitutions": {"care_be_tag":"'"$COMMIT_SHA"'", "care_fe_tag": "", "metabase_tag": ""}}'
          curl --location "${{ secrets.STAGING_GCP_DEPLOY_URL }}" \
            --header 'Content-Type: application/json' --data "$JSON"
